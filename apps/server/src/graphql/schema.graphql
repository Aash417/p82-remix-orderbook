# Defines the possible types for an order
enum OrderType {
   BUY
   SELL
}

# Defines the possible statuses of an order
enum OrderStatus {
   OPEN
   FILLED
   PARTIALLY_FILLED
   CANCELLED
}

# Represents a single order in the order book
type Order {
   id: ID!
   price: Float!
   quantity: Float!
   type: OrderType!
   status: OrderStatus!
   createdAt: Float!
}

# Represents an executed trade between two orders
type Trade {
   id: ID!
   price: Float!
   quantity: Float!
   timestamp: Float!
   makerOrderId: ID!
   takerOrderId: ID!
}

# Represents the current state of the order book
type Orderbook {
   bids: [Order!]!
   asks: [Order!]!
}

# Entry points for reading data
type Query {
   "A simple query for health checks"
   ping: String

   "Retrieves the current state of the order book for a given market"
   getOrderbook(market: String!): Orderbook
}

# Entry points for changing data
type Mutation {
   "Creates a new order and submits it to the matching engine"
   createOrder(price: Float!, quantity: Float!, type: OrderType!): Order
}

# Entry points for real-time data
type Subscription {
   "Fires whenever a new trade is executed for a given market"
   tradeCreated(market: String!): Trade
}
